/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.overpass;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.json.*;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.JsonHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import cz.msebera.android.httpclient.Header;

@Kroll.module(name = "Overpass", id = "de.appwerft.overpass")
public class OverpassModule extends KrollModule {

	private final class OverpassResponseHandler extends JsonHttpResponseHandler {
		@Override
		public void onFailure(int statusCode, Header[] headers,
				Throwable throwable, JSONObject errorResponse) {
		}

		@Override
		public void onFailure(int statusCode, Header[] headers,
				Throwable throwable, JSONArray errorResponse) {
		}

		@Override
		public void onFailure(int statusCode, Header[] headers,
				String responseString, Throwable throwable) {
			if (onResult != null) {
				Log.d(LCAT, "status=" + statusCode);
				KrollDict dict = new KrollDict();
				dict.put("status", statusCode);
				if (System.currentTimeMillis() - startTime < 100) {
					dict.put("error", "offline");
					dict.put("message", "Host not reachable");
				} else {
					dict.put("error", "timeout");
					dict.put("time", ""
							+ (System.currentTimeMillis() - startTime));
					dict.put("message", "Server don't answer in 30 sec. ");
				}
				onResult.call(getKrollObject(), dict);
			}
		}

		@Override
		public void onSuccess(int statusCode, Header[] headers,
				JSONObject response) {

			if (onResult != null) {
				KrollDict res = new KrollDict();
				res.put("success", true);
				try {
					res.put("result", new KrollDict(response));
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				onResult.call(getKrollObject(), res);
			}
		}
	}

	private static final String LCAT = "Openpass";
	@Kroll.constant
	public static final String ENDPOINT_MAIN = "http://overpass-api.de/api/";
	@Kroll.constant
	public static final String ENDPOINT_RAMBLER = "http://overpass.osm.rambler.ru/cgi/";
	@Kroll.constant
	public static final String ENDPOINT_FRENCH = "http://api.openstreetmap.fr/oapi/interpreter/";
	private String ENDPOINT = ENDPOINT_FRENCH;
	private int TIMEOUT = 30000;

	private KrollFunction onResult;
	private long startTime;

	public OverpassModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	@Kroll.method
	public void createRequest(String query, Object res)
			throws UnsupportedEncodingException, JSONException {
		if (res != null & res instanceof KrollFunction)
			onResult = (KrollFunction) res;
		AsyncHttpClient client = new AsyncHttpClient();
		client.setTimeout(TIMEOUT);
		startTime = System.currentTimeMillis();
		String url = ENDPOINT + "?data=[out:json];"
				+ URLEncoder.encode(query + "out body;", "UTF-8");
		RequestParams params = null;
		client.get(url, params, new OverpassResponseHandler());

	}

	@Kroll.setProperty
	public void setEndpoint(String ep) {
		this.ENDPOINT = ep;
	}

}
